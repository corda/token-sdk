import static org.gradle.api.JavaVersion.VERSION_1_8

buildscript {
    ext {
        corda_release_group = 'net.corda'
        corda_release_version = '4.5.1'
        tokens_release_group = "com.r3.corda.lib.tokens"
        tokens_release_version = "1.2.4-SNAPSHOT"
        junit_version = '4.13.2'
        slf4j_version = '1.7.25'
        log4j_version = '2.9.1'
        jackson_version = '2.9.0'
        confidential_id_release_group = "com.r3.corda.lib.ci"
        confidential_id_release_version = "1.0"
        aetherVersion = '1.0.0.v20140518'
        mavenVersion = '3.1.0'
        maven_resolver_version = "1.1.1"
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" apply false
    id 'com.jfrog.artifactory'
}

allprojects {
    version tokens_release_version
    group tokens_release_group

    configurations.all {
        resolutionStrategy {
            // Force dependencies to use the same version of Kotlin
            force "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
            force "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
            force "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
            force "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
            force "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

            cacheChangingModulesFor 0, 'seconds'
        }
    }
}

subprojects {
    repositories {
        mavenCentral()
        mavenLocal()
        jcenter {
            content {
                includeGroup 'com.beust'
            }
        }
        maven { url "$artifactory_contextUrl/corda-releases" }
        maven { url "$artifactory_contextUrl/corda-dependencies" }
        maven { url "$artifactory_contextUrl/corda-lib" }
        maven { url "https://repo.gradle.org/gradle/libs-releases-local/" }
    }

    pluginManager.withPlugin('org.jetbrains.kotlin.plugin.allopen') {
        allOpen {
            annotations(
                'javax.persistence.Entity',
                'javax.persistence.Embeddable',
                'javax.persistence.MappedSuperclass'
            )
        }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        kotlinOptions {
            languageVersion = "1.2"
            apiVersion = "1.2"
            jvmTarget = VERSION_1_8
            javaParameters = true   // Useful for reflection.
        }
    }

    tasks.withType(Jar).configureEach {
        exclude "**/log4j2*.xml"
    }

    tasks.withType(Test).configureEach {
        minHeapSize = "128m"
        maxHeapSize = "4096m"

        doFirst {
            // Prevent the project from creating temporary files outside of the build directory.
            systemProperty 'java.io.tmpdir', buildDir.absolutePath
        }
    }
}

// Don't publish an empty "modules" JAR.
def publishProjects = [
        project(":contracts"),
        project(":workflows")
]

configure(publishProjects) { subproject ->
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.artifactory'

    tasks.register('install') {
        dependsOn 'publishToMavenLocal'
    }

    publishing {
        publications {
            create(subproject.name, MavenPublication) {
                pluginManager.withPlugin('java') {
                    from components.java

                    artifact tasks.create('sourceJar', Jar) {
                        dependsOn subproject.classes
                        archiveClassifier = 'sources'
                        from sourceSets.main.allSource
                    }
                    artifact tasks.create('javadocJar', Jar) {
                        dependsOn subproject.javadoc
                        archiveClassifier = 'javadoc'
                        from javadoc.destinationDir
                    }
                }

                groupId subproject.group
                artifactId "tokens-${subproject.name}"

                pom {
                    description = subproject.description
                }
            }
        }
    }
}


artifactory {
    publish {
        contextUrl = artifactory_contextUrl
        repository {
            repoKey = 'corda-lib-dev'
            username = System.getenv('CORDA_ARTIFACTORY_USERNAME') ?: System.getProperty('corda.artifactory.username')
            password = System.getenv('CORDA_ARTIFACTORY_PASSWORD') ?: System.getProperty('corda.artifactory.password')
        }

        defaults {
            if (publishProjects.contains(project)) {
                publications(project.name)
            }
        }
    }
}

wrapper {
    gradleVersion = "5.6.4"
    distributionType = Wrapper.DistributionType.BIN
}

//add for test re-run
